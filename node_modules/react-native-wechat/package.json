{
  "_args": [
    [
      {
        "hosted": {
          "directUrl": "https://raw.githubusercontent.com/weflex/react-native-wechat/master/package.json",
          "gitUrl": "git://github.com/weflex/react-native-wechat.git",
          "httpsUrl": "git+https://github.com/weflex/react-native-wechat.git",
          "shortcut": "github:weflex/react-native-wechat",
          "ssh": "git@github.com:weflex/react-native-wechat.git",
          "sshUrl": "git+ssh://git@github.com/weflex/react-native-wechat.git",
          "type": "github"
        },
        "name": "react-native-wechat",
        "raw": "react-native-wechat@github:weflex/react-native-wechat",
        "rawSpec": "github:weflex/react-native-wechat",
        "scope": null,
        "spec": "github:weflex/react-native-wechat",
        "type": "hosted"
      },
      "/Users/jagger/projects/zqc-app-demo"
    ]
  ],
  "_from": "weflex/react-native-wechat",
  "_id": "react-native-wechat@1.8.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-wechat",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/weflex/react-native-wechat/master/package.json",
      "gitUrl": "git://github.com/weflex/react-native-wechat.git",
      "httpsUrl": "git+https://github.com/weflex/react-native-wechat.git",
      "shortcut": "github:weflex/react-native-wechat",
      "ssh": "git@github.com:weflex/react-native-wechat.git",
      "sshUrl": "git+ssh://git@github.com/weflex/react-native-wechat.git",
      "type": "github"
    },
    "name": "react-native-wechat",
    "raw": "react-native-wechat@github:weflex/react-native-wechat",
    "rawSpec": "github:weflex/react-native-wechat",
    "scope": null,
    "spec": "github:weflex/react-native-wechat",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/weflex/react-native-wechat.git#cabc84253fd2d85cb0267668eb06cb164f3d2899",
  "_shasum": "5a7654906ad02e1724533870649a052d3b0487b7",
  "_shrinkwrap": null,
  "_spec": "react-native-wechat@github:weflex/react-native-wechat",
  "_where": "/Users/jagger/projects/zqc-app-demo",
  "author": {
    "email": "yorkiefixer@gmail.com",
    "name": "Yorkie Liu"
  },
  "bugs": {
    "url": "https://github.com/weflex/react-native-wechat/issues"
  },
  "contributors": [
    {
      "email": "yorkiefixer@gmail.com",
      "name": "Yorkie Liu"
    },
    {
      "email": "tdzl2003@gmail.com",
      "name": "Deng Yun"
    }
  ],
  "dependencies": {
    "es6-promisify": "3.0.0",
    "events": "1.0.2"
  },
  "description": "react-native library for wechat app",
  "devDependencies": {},
  "gitHead": "cabc84253fd2d85cb0267668eb06cb164f3d2899",
  "homepage": "https://github.com/weflex/react-native-wechat#readme",
  "keywords": [
    "wechat",
    "react",
    "react-native",
    "react-component",
    "ios"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-native-wechat",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.40"
  },
  "readme": "![react-native-wechat logo](./logo.jpg?raw=true)\n\n## Table of Contents\n\n- [Build](#build)\n- [Linking Steps](#linking-steps)\n  - [Linking iOS](#linking-ios)\n  - [Linking Android with Gradle](#linking-android-with-gradle)\n- [API Documentation](#api-documentation)\n  - [`registerApp(appid)`](#registerappappid)\n  - [`registerAppWithDescription(appid, appdesc)`](#registerappappid)\n  - [`isWXAppInstalled()`](#iswxappinstalled)\n  - [`isWXAppSupportApi()`](#iswxappsupportapi)\n  - [`getApiVersion()`](#iswxappsupportapi)\n  - [`openWXApp()`](#openwxapp)\n  - [`sendAuthRequest([scope[, state]])`](#sendauthrequestscope-state)\n  - [`shareToTimeline(data)`](#sharetotimelinedata)\n  - [`shareToSession(data)`](#sharetosessiondata)\n  - [`pay(data)`](#paydata)\n  - [`addListener(eventType, listener[, context])`](#addlistenereventtype-listener-context)\n  - [`once(eventType, listener[, context])`](#onceeventtype-listener-context)\n  - [`removeAllListeners()`](#removealllisteners)\n- [Installation](#installation)\n- [Community](#community)\n- [Who Use It](#who-use-it)\n- [Authors](#authors)\n- [License](#license)\n\n## Build\n\nReact-Native bridge static library for WeChat SDK which requires:\n\n- [x] iOS SDK 1.7.2\n- [x] Android SDK 221\n\nAnd [react-native-wechat] has the following tracking data in open source world:\n\n| type        | badge                                           |\n|-------------|-------------------------------------------------|\n| NPM         | [![NPM version][npm-image]][npm-url]            |\n| Dependency  | [![Dependency Status][david-image]][david-url]  |\n| Downloads   | [![Downloads][downloads-image]][downloads-url]  |\n\n## Linking Steps\n\nBefore using this library to work with your app, you should follow the below steps to link this library with\nyour app project, _if there is something that not working, please check the list here_.\n\n### Linking iOS\n\n- Link `RCTWeChat` library from your `node_modules/react-native-wechat/ios` folder like react-native's \n[Linking Libraries iOS Guidance], Note: _Don't forget to add it to \"Build Phases\" of your target project_.\n\n- Add the following libraries to your \"Link Binary with Libraries\":\n\n    ```\n    SystemConfiguration.framework\n    CoreTelephony.framework\n    libsqlite3.0\n    libc++\n    libz\n    ```\n\n- Add \"URL Schema\" as your app id for \"URL type\" in `Targets` > `info`, See the following screenshot for the view on your XCode\n    ![Set URL Schema in XCode](https://res.wx.qq.com/open/zh_CN/htmledition/res/img/pic/app-access-guide/ios/image0042168b9.jpg)\n\n- Only for iOS 9, add `wechat` and `weixin` into `LSApplicationQueriesSchemes` in `Targets` > `info` > `Custom iOS Target Properties`.\n\nor edit Info.plist add:\n\n    ```\n    <key>LSApplicationQueriesSchemes</key>\n    <array>\n        <string>weixin</string>\n        <string>wechat</string>\n    </array>\n    ```\n\n\n- Code the following in `AppDelegate.m` of your project to enable [LinkingIOS]\n\n    ```objective-c\n    #import \"../Libraries/LinkingIOS/RCTLinkingManager.h\"\n    \n    - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n    sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n    {\n      return [RCTLinkingManager application:application openURL:url\n                                sourceApplication:sourceApplication annotation:annotation];\n    }\n    ```\n\n### Linking Android with Gradle\n\n- Add following lines into `android/settings.gradle`\n\n    ```gradle\n    include ':RCTWeChat'\n    project(':RCTWeChat').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-wechat/android')\n    ```\n\n- Add following lines into your `android/app/build.gradle` in section `dependencies`\n\n    ```gradle\n    dependencies {\n      compile project(':RCTWeChat')    // Add this line only.\n    }\n    ```\n\n- Add following lines into `MainActivity.java` or `MainApplication.java`:\n\n    ```java\n    import com.theweflex.react.WeChatPackage;       // Add this line before public class MainActivity\n    ...\n\n    /**\n     * A list of packages used by the app. If the app uses additional views\n     * or modules besides the default ones, add more packages here.\n     */\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n        new MainReactPackage(), \n        new WeChatPackage()        // Add this line\n      );\n    }\n    ```\n\n- Create a package named 'wxapi' in your application package and a class named 'WXEntryActivity' in it. \n  This is required to get authorization and sharing response from wechat.\n\n    ```java\n    package your.package.wxapi;\n\n    import android.app.Activity;\n    import android.os.Bundle;\n    import com.theweflex.react.WeChatModule;\n\n    public class WXEntryActivity extends Activity {\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        WeChatModule.handleIntent(getIntent());\n        finish();\n      }\n    }\n    ```\n\n- (Optional) Create a package named 'wxapi' in your application package and a class named 'WXPayEntryActivity'\n  in it. This is required to get payment response from WeChat.\n\n    ```java\n    package your.package.wxapi;\n\n    import android.app.Activity;\n    import android.os.Bundle;\n    import com.theweflex.react.WeChatModule;\n\n    public class WXPayEntryActivity extends Activity {\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        WeChatModule.handleIntent(getIntent());\n        finish();\n      }\n    }\n    ```\n\n- Add activity declare in your AndroidManifest.xml\n\n    ```xml\n    <manifest>\n      <application>\n        <!-- WeChat Auth/Share Activity -->\n        <activity\n          android:name=\".wxapi.WXEntryActivity\"\n          android:label=\"@string/app_name\"\n          android:exported=\"true\"\n        />\n        <!-- WeChat Payment Activity -->\n        <activity\n          android:name=\".wxapi.WXPayEntryActivity\"\n          android:label=\"@string/app_name\"\n          android:exported=\"true\"\n        />\n      </application>\n    </manifest>\n    ```\n\n- Add these lines to 'proguard-rules.pro':\n\n    ```pro\n    -keep class com.tencent.mm.sdk.** {\n       *;\n    }\n    ```\n\n## API Documentation\n\n[react-native-wechat] supports the following methods to get information and do something functions\nwith WeChat app.\n\n#### registerApp(appid)\n\nYou should call this function in global, calling over twice would throw an error.\n\n  ```js\n  // If you register here\n  componentDidMount (){\n    wechat.registerApp('your appid')\n  }\n  ```\n\n- {String} `appid` the appid you get from WeChat dashboard\n- returns {Promise} \n\n#### registerAppWithDescription(appid, appdesc)\n\nOnly available on iOS.\n\n- {String} `appid` the appid you get from WeChat dashboard\n- {String} `appdesc` the description of your app\n- returns {Promise} \n\n#### isWXAppInstalled() \n\nCheck if wechat installed in this app.\n\n- returns {Promise} Contain the result.\n\n#### isWXAppSupportApi()\n\nCheck if wechat support open url.\n\n- returns {Promise}  Contain the result.\n\n#### getApiVersion()\n\nGet api version of WeChat SDK.\n\n- returns {Promise}  Contain the result.\n\n#### openWXApp()\n\nOpen WeChat app with an optional callback argument.\n\n- returns {Promise} \n\n#### sendAuthRequest([scope[, state]])\n\nSend authentication request, namely login.\n\n- {Array|String} `scope` Scopes of auth request.\n- {String} `state` the state of OAuth2\n- returns {Promise}\n\nAnd it returns:\n\n| name    | type   | description                         |\n|---------|--------|-------------------------------------|\n| errCode | Number |                                     |\n| errStr  | String | Error message if any error occurred |\n| openId  | String |                                     |\n| code    | String | Authorization code                  |\n| url     | String | The URL string                      |\n| lang    | String | The user language                   | \n| country | String | The user country                    |\n\n#### shareToTimeline(data)\n\nShare a message to timeline (朋友圈).\n\n- {Object} `data` contain the message to send\n    - {String} `thumbImage` Thumb image of the message, which can be a uri or a resource id.\n    - {String} `type` Type of this message. Can be {news|text|imageUrl|imageFile|imageResource|video|audio|file}\n    - {String} `webpageUrl` Required if type equals `news`. The webpage link to share.\n    - {String} `imageUrl` Provide a remote image if type equals `image`.\n    - {String} `videoUrl` Provide a remote video if type equals `video`.\n    - {String} `musicUrl` Provide a remote music if type equals `audio`.\n    - {String} `filePath` Provide a local file if type equals `file`.\n    - {String} `fileExtension` Provide the file type if type equals `file`.\n\nAnd returns:\n\n| name    | type   | description                         |\n|---------|--------|-------------------------------------|\n| errCode | Number | 0 if authorization successed        |\n| errStr  | String | Error message if any error occurred |\n\nThese example code need 'react-native-chat' and 'react-native-fs' plugin.\n\n```js\nimport * as WeChat from 'react-native-wechat';\nimport fs from 'react-native-fs';\nlet resolveAssetSource = require('resolveAssetSource');\n\n// Code example to share text message:\ntry {\n  let result = await WeChat.shareToTimeline({\n    type: 'text', \n    description: 'hello, wechat'\n  });\n  console.log('share text message to time line successful:', result);\n} catch (e) {\n  console.error('share text message to time line failed with:', e);\n}\n\n// Code example to share image url:\n// Share raw http(s) image from web will always fail with unknown reason, please use image file or image resource instead\ntry {\n  let result = await WeChat.shareToTimeline({\n    type: 'imageUrl',\n    title: 'web image',\n    description: 'share web image to time line',\n    mediaTagName: 'email signature',\n    messageAction: undefined,\n    messageExt: undefined,\n    imageUrl: 'http://www.ncloud.hk/email-signature-262x100.png'\n  });\n  console.log('share image url to time line successful:', result);\n} catch (e) {\n  console.log('share image url to time line failed with:', e);\n}\n\n// Code example to share image file:\ntry {\n  let rootPath = fs.DocumentDirectoryPath;\n  let savePath = rootPath + '/email-signature-262x100.png';\n  console.log(savePath);\n  \n  /*\n   * savePath on iOS may be:\n   *  /var/mobile/Containers/Data/Application/B1308E13-35F1-41AB-A20D-3117BE8EE8FE/Documents/email-signature-262x100.png\n   *\n   * savePath on Android may be:\n   *  /data/data/com.wechatsample/files/email-signature-262x100.png\n   **/\n  await fs.downloadFile('http://www.ncloud.hk/email-signature-262x100.png', savePath);\n  let result = await WeChat.shareToTimeline({\n    type: 'imageFile',\n    title: 'image file download from network',\n    description: 'share image file to time line',\n    mediaTagName: 'email signature',\n    messageAction: undefined,\n    messageExt: undefined,\n    imageUrl: \"file://\" + savePath // require the prefix on both iOS and Android platform\n  });\n  console.log('share image file to time line successful:', result);\n} catch (e) {\n  console.error('share image file to time line failed with:', e);\n}\n\n// Code example to share image resource:\ntry {\n  let imageResource = require('./email-signature-262x100.png');\n  let result = await WeChat.shareToTimeline({\n    type: 'imageResource',\n    title: 'resource image',\n    description: 'share resource image to time line',\n    mediaTagName: 'email signature',\n    messageAction: undefined,\n    messageExt: undefined,\n    imageUrl: resolveAssetSource(imageResource).uri\n  });\n  console.log('share resource image to time line successful', result);\n}\ncatch (e) {\n  console.error('share resource image to time line failed', e);\n}\n\n// Code example to download an word file from web, then share it to WeChat session\n// only support to share to session but time line\n// iOS code use DocumentDirectoryPath\ntry {\n  let rootPath = fs.DocumentDirectoryPath;\n  let fileName = 'signature_method.doc';\n  /*\n   * savePath on iOS may be:\n   *  /var/mobile/Containers/Data/Application/B1308E13-35F1-41AB-A20D-3117BE8EE8FE/Documents/signature_method.doc\n   **/ \n  let savePath = rootPath + '/' + fileName;\n\n  await fs.downloadFile('https://open.weixin.qq.com/zh_CN/htmledition/res/assets/signature_method.doc', savePath);\n  let result = await WeChat.shareToSession({\n    type: 'file',\n    title: fileName, // WeChat app treat title as file name\n    description: 'share word file to chat session',\n    mediaTagName: 'word file',\n    messageAction: undefined,\n    messageExt: undefined,\n    filePath: savePath,\n    fileExtension: '.doc'\n  });\n  console.log('share word file to chat session successful', result);\n} catch (e) {\n  console.error('share word file to chat session failed', e);\n}\n\n//android code use ExternalDirectoryPath\ntry {\n  let rootPath = fs.ExternalDirectoryPath;\n  let fileName = 'signature_method.doc';\n  /*\n   * savePath on Android may be:\n   *  /storage/emulated/0/Android/data/com.wechatsample/files/signature_method.doc\n   **/\n  let savePath = rootPath + '/' + fileName;\n  await fs.downloadFile('https://open.weixin.qq.com/zh_CN/htmledition/res/assets/signature_method.doc', savePath);\n  let result = await WeChat.shareToSession({\n    type: 'file',\n    title: fileName, // WeChat app treat title as file name\n    description: 'share word file to chat session',\n    mediaTagName: 'word file',\n    messageAction: undefined,\n    messageExt: undefined,\n    filePath: savePath,\n    fileExtension: '.doc'\n  });\n  console.log('share word file to chat session successful', result);\n}\ncatch (e) {\n  console.error('share word file to chat session failed', e);\n}\n```\n\n#### shareToSession(data)\n\nSimilar to `shareToTimeline` but send message to a friend or a groups.\n\n#### pay(data)\n\nCreate a request to proceeding payment.\n\n```js\nconst result = await WeChat.pay(\n  {\n    partnerId: '',  // 商家向财付通申请的商家id\n    prepayId: '',   // 预支付订单\n    nonceStr: '',   // 随机串，防重发\n    timeStamp: '',  // 时间戳，防重发\n    package: '',    // 商家根据财付通文档填写的数据和签名\n    sign: ''        // 商家根据微信开放平台文档对数据做的签名\n  }\n);\n```\n\nIt returns an object like this:\n\n| name    | type   | description                         |\n|---------|--------|-------------------------------------|\n| errCode | Number | 0 if authorization successed        |\n| errStr  | String | Error message if any error occurred |\n\n#### addListener(eventType, listener[, context])\n\nAdds a listener to be invoked when events of the specified type are emitted. An optional calling context may be provided. \n\nReturn a object like `{remove: function}` which can be used to remove this listener.\n\n#### once(eventType, listener[, context])\n\nSimilar to addListener, except that the listener is removed after it is invoked once.\n\n#### removeAllListeners()\n\nRemoves all of the registered listeners, including those registered as listener maps.\n\n## Installation\n\n```sh\n$ npm install react-native-wechat --save\n```\n\n## Community\n\n- [Join us at gitter](https://gitter.im/weflex/react-native-wechat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n- QQ Group: 336021910\n\n## Who Use It\n- [reading: iReading App Write In React-Native](https://github.com/attentiveness/reading)\n\n## Authors\n\n- [Deng Yun]\n- [Xing Zhen]\n- [Yorkie Liu]\n\n## License\n\nMIT @ [WeFlex], Inc\n\n[react-native-wechat]: https://github.com/weflex/react-native-wechat\n[npm-image]: https://img.shields.io/npm/v/react-native-wechat.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/react-native-wechat\n[travis-image]: https://img.shields.io/travis/weflex/react-native-wechat.svg?style=flat-square\n[travis-url]: https://travis-ci.org/weflex/react-native-wechat\n[david-image]: http://img.shields.io/david/weflex/react-native-wechat.svg?style=flat-square\n[david-url]: https://david-dm.org/weflex/react-native-wechat\n[downloads-image]: http://img.shields.io/npm/dm/react-native-wechat.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/react-native-wechat\n[Deng Yun]: https://github.com/tdzl2003\n[Xing Zhen]: https://github.com/xing-zheng\n[Yorkie Liu]: https://github.com/yorkie\n[WeFlex]: https://github.com/weflex\n[react-native-cn]: https://github.com/reactnativecn\n[WeChat SDK]: https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=1417674108&token=&lang=zh_CN\n[Linking Libraries iOS Guidance]:\nhttps://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/weflex/react-native-wechat.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.8.0"
}
